import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;

public class Connect4 {
	private JFrame frame;

	public Connect4() {
		frame = new JFrame("DrawGrid");
		frame.setSize(600, 400);
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		frame.setPreferredSize(frame.getSize());
		frame.add(new MultiDraw(frame.getSize()));
		frame.pack();
		frame.setVisible(true);
	}

	public static void main(String... argv) {
		new Connect4();
	}

	public static class MultiDraw extends JPanel implements MouseListener {
		int startX = 20;
		int startY = 40;
		int spaceX = 0;
		int spaceY = 0;
		int cellWidth = 40;
		int turn = 2;
		int rows = 6;
		int cols = 7;
		int x = 0;
		int y = 0;
		boolean place = false;

		Color[][] grid = new Color[rows][cols];

		public MultiDraw(Dimension dimension) {
			setSize(dimension);
			setPreferredSize(dimension);
			addMouseListener(this);

			int x = 0;
			for (int row = 0; row < grid.length; row++) {
				for (int col = 0; col < grid[0].length; col++) {
					grid[row][col] = Color.black;

				}
			}
		}

		@Override
		public void paintComponent(Graphics g) {
			Graphics2D g2 = (Graphics2D) g;
			Dimension d = getSize();
			g2.setColor(new Color(0, 0, 0));
			g2.fillRect(0, 0, d.width, d.height);
			g2.setColor(Color.blue);
			g2.fillRect(startX, startY, 400, 320);

			for (int row = 0; row < grid.length; row++) {
				for (int col = 0; col < 7; col++) {
					g2.setColor(grid[row][col]);
					g2.fillOval((50 * col) + (startX + 20), (50 * row) + (startY + 20), 40, 40);

				}

			}
			if (place == true && turn == 1) {
				int col = getCol(x);
				int row = lowestRow(col, grid);
				g2.setColor(grid[row][col]);
				g2.fillOval((50 * col) + (startX + 20), (50 * row) + (startY + 20), 40, 40);
				place = false;
				System.out.println(row);
				System.out.println(col);

			} else if (place == true && turn == 2) {
				int col = getCol(x);
				int row = lowestRow(col, grid);
				g2.setColor(grid[row][col]);
				g2.fillOval((50 * col) + (startX + 20), (50 * row) + (startY + 20), 40, 40);
				place = false;
				System.out.println(row);
				System.out.println(col);

			}

			g2.setColor(new Color(255, 255, 255));
			if (turn == 1)
				g2.drawString("Yellow's Turn", 400, 20);
			if (turn == 2)
				g2.drawString("Red's Turn", 400, 20);

		}

		public void mousePressed(MouseEvent e) {

			x = e.getX();
			y = e.getY();
			place = true;
			if (place == true) {
				int col = getCol(x);
				int row = lowestRow(col, grid);
				if (turn == 1) {
					if (row == 0&&grid[row][col]!=Color.BLACK)
						System.out.println("Try another column!");
					else
						grid[row][col] = Color.yellow;
				}
				if (turn == 2)
					if (row == 0&&grid[row][col]!=Color.BLACK)
						System.out.println("Try another column!");
					else
						grid[row][col] = Color.red;
			}
			place=false;
			turn++;
			if (turn > 2)
				turn = 1;
			repaint();
			// System.out.println(x);
			// System.out.println(y);
		}

		public void mouseReleased(MouseEvent e) {

		}

		public void mouseEntered(MouseEvent e) {

		}

		public void mouseExited(MouseEvent e) {

		}

		public void mouseClicked(MouseEvent e) {

		}

		public static int getCol(int y) {
			if (y < 85)
				return 0;
			else if (y < 135)
				return 1;
			else if (y < 185)
				return 2;
			else if (y < 235)
				return 3;
			else if (y < 285)
				return 4;
			else if (y < 335)
				return 5;
			else if (y < 375)
				return 6;

			return -1;

		}

		public static int lowestRow(int y, Color[][] grid) {
			int lowest = 0;
			for (int i = 0; i < 6; i++) {
				if (grid[i][y] == Color.black)
					lowest = i;
			}
			return lowest;
		}

	}

}
